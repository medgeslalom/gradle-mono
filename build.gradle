plugins {
    id 'io.freefair.lombok' version '5.0.0'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.diffplug.gradle.spotless' version '3.28.1'
    id 'com.github.spotbugs' version '4.0.7'
    id 'org.openapi.generator' version '4.3.0'
    id 'java'
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

// Shared configuration for all subprojects
subprojects {
    group = 'io.example'
    sourceCompatibility = '11'
    targetCompatibility = '11'

    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.openapi.generator'

    spotbugs {
        ignoreFailures = false
        reportsDir = file("$buildDir/reports/spotbugs")
        effort = 'default'
    }
    spotbugsMain {
        reports {
            xml.enabled false
            html {
                enabled true
                destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            }
        }
    }

    // code formatting
    compileJava.finalizedBy 'spotlessApply'
    spotless {
        format 'misc', {
            target '**/*.gradle', '**/*.md', '**/.gitignore', '**/application*.yml'

            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }

        java {
            googleJavaFormat()
        }
    }

    // OpenAPI Code Generation
    // Dependencies required for OpenAPI-generated classes
    dependencies {
        implementation 'io.springfox:springfox-swagger2:2.8.0'
        implementation 'org.openapitools:jackson-databind-nullable:0.1.0'
    }

    // aggregate task for generating all APIs
    task genApis {
        finalizedBy 'spotlessApply' // Ensure generated classes are properly formatted
    }

    // Create a API Generation task for each YAML file in the subproject's /apis/ folder
    fileTree(dir: "$projectDir/apis/", include: '**/*.yml').each {
        println "processing ${it.name}"
        def apiName = it.getName().replace('.yml', '')
        def taskName = 'openApiGenerate' + apiName.capitalize()
        tasks.genApis.dependsOn taskName

        tasks.create(taskName, org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class, {
            generatorName = 'spring'
            inputSpec = "$projectDir/apis/".toString() + "${apiName}.yml"
            outputDir = "$projectDir/" // Generates in the project's src/main/java folder directly
            templateDir = "$rootDir/generator-templates" // Customizations to spring generator
            apiPackage = "io.example.api.${apiName}"
            modelPackage = "io.example.api.${apiName}"
            generateAliasAsModel = false
            configOptions =[
                hideGenerationTimestamp: 'true', // remove @Generated annotations
                additionalModelTypeAnnotations: '@lombok.Data',
                java8: 'true',
                dateLibrary: 'java8',
                // skipDefaultInterface: "true",
                useBeanValidation: 'false',
            ]
            // Only generates apis and models. Everything else is omitted
            systemProperties =[
                apis: '',
                models: '',
            ]
        })
    }
    compileJava.dependsOn tasks.genApis

}

// Project-specific configurations
configure(subprojects.findAll {
    it.name == 'gateway' ||
        it.name == 'user-service' ||
        it.name == 'pet-service'
}) {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    // If running on unix - this prepends a shell script to the jar so that you can run it with ./my.jar
    bootJar {
        launchScript()
    }

    // Configuration for dependencies (like dev-tools) only available in Spring Boot Dev Mode
    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    // Example of shared dependencies for specific services. Can also exist in their own build.gradle
    // if they are hyper-specific to that module
    dependencies {
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
    }
}

// Auto-install required git hooks
task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'hooks')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}
compileJava.dependsOn installGitHook
