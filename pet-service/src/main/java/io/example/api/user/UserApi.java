/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package io.example.api.user;

import io.swagger.annotations.*;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

@Api(value = "user", description = "the user API")
public interface UserApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /user : Create user This can only be done by the logged in user.
   *
   * @param user Created user object (required)
   * @return successful operation (status code 200)
   */
  @ApiOperation(
      value = "Create user",
      nickname = "createUser",
      notes = "This can only be done by the logged in user.",
      tags = {
        "user",
      })
  @ApiResponses(value = {@ApiResponse(code = 200, message = "successful operation")})
  @RequestMapping(
      value = "/user",
      consumes = {"application/json"},
      method = RequestMethod.POST)
  default ResponseEntity<Void> createUser(
      @ApiParam(value = "Created user object", required = true) @RequestBody User user) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); // TODO
  }

  /**
   * DELETE /user/{username} : Delete user This can only be done by the logged in user.
   *
   * @param username The name that needs to be deleted (required)
   * @return Invalid username supplied (status code 400) or User not found (status code 404)
   */
  @ApiOperation(
      value = "Delete user",
      nickname = "deleteUser",
      notes = "This can only be done by the logged in user.",
      tags = {
        "user",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found")
      })
  @RequestMapping(value = "/user/{username}", method = RequestMethod.DELETE)
  default ResponseEntity<Void> deleteUser(
      @ApiParam(value = "The name that needs to be deleted", required = true)
          @PathVariable("username")
          String username) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); // TODO
  }

  /**
   * GET /user/{username} : Get user by user name
   *
   * @param username The name that needs to be fetched. Use user1 for testing. (required)
   * @return successful operation (status code 200) or Invalid username supplied (status code 400)
   *     or User not found (status code 404)
   */
  @ApiOperation(
      value = "Get user by user name",
      nickname = "getUserByName",
      notes = "",
      response = User.class,
      tags = {
        "user",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found")
      })
  @RequestMapping(
      value = "/user/{username}",
      produces = {"application/json"},
      method = RequestMethod.GET)
  default ResponseEntity<User> getUserByName(
      @ApiParam(
              value = "The name that needs to be fetched. Use user1 for testing.",
              required = true)
          @PathVariable("username")
          String username) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); // TODO
  }

  /**
   * GET /user/login : Logs user into the system
   *
   * @param username The user name for login (required)
   * @param password The password for login in clear text (required)
   * @return successful operation (status code 200) or Invalid username/password supplied (status
   *     code 400)
   */
  @ApiOperation(
      value = "Logs user into the system",
      nickname = "loginUser",
      notes = "",
      response = String.class,
      tags = {
        "user",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid username/password supplied")
      })
  @RequestMapping(
      value = "/user/login",
      produces = {"application/json"},
      method = RequestMethod.GET)
  default ResponseEntity<String> loginUser(
      @ApiParam(value = "The user name for login", required = true)
          @RequestParam(value = "username", required = true)
          String username,
      @ApiParam(value = "The password for login in clear text", required = true)
          @RequestParam(value = "password", required = true)
          String password) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); // TODO
  }

  /**
   * GET /user/logout : Logs out current logged in user session
   *
   * @return successful operation (status code 200)
   */
  @ApiOperation(
      value = "Logs out current logged in user session",
      nickname = "logoutUser",
      notes = "",
      tags = {
        "user",
      })
  @ApiResponses(value = {@ApiResponse(code = 200, message = "successful operation")})
  @RequestMapping(value = "/user/logout", method = RequestMethod.GET)
  default ResponseEntity<Void> logoutUser() {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); // TODO
  }

  /**
   * PUT /user/{username} : Updated user This can only be done by the logged in user.
   *
   * @param username name that need to be deleted (required)
   * @param user Updated user object (required)
   * @return Invalid user supplied (status code 400) or User not found (status code 404)
   */
  @ApiOperation(
      value = "Updated user",
      nickname = "updateUser",
      notes = "This can only be done by the logged in user.",
      tags = {
        "user",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "User not found")
      })
  @RequestMapping(
      value = "/user/{username}",
      consumes = {"application/json"},
      method = RequestMethod.PUT)
  default ResponseEntity<Void> updateUser(
      @ApiParam(value = "name that need to be deleted", required = true) @PathVariable("username")
          String username,
      @ApiParam(value = "Updated user object", required = true) @RequestBody User user) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); // TODO
  }
}
